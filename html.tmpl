<!DOCTYPE html>
<html>
	<head>
		<title>Albums: $this_genre.name</title>

		<meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
		<link href="../style.css" rel="stylesheet" type="text/css" />

		<script type="text/javascript" src="../jquery-1.4.4.min.js"></script> 
		<script type="text/javascript">
		#raw
			var cached_albums = [];

			function readAlbums() {
				var albumcontainer = $('#albums');	
				var albums = albumcontainer.children('div.album').get();
				$.each(albums, function(idx, item) {
					cached_albums.push({ element: item });
                });
			}

			function readCacheableProperty(album, name, f) {
				if (album[name] == undefined) {
					album[name] = f(album.element);
				}
				return album[name];
			}

			function sort(f) {
				var albumcontainer = $('#albums');	
				var albums = albumcontainer.children('div.album').get();

				if (!cached_albums.length) readAlbums();
				cached_albums.sort(f);

				$.each(cached_albums, function(idx, item) { albumcontainer.append(item.element); });
			}

			function sortByDate() {
				function readDate(x) {
					var s = $.trim($(x).find('p.releasedate').text());

					var numDashes = 2;
					for (var i = 0; i < s.length; ++i)
						if (s[i] == '-') --numDashes;

					for (var i = 0; i < numDashes; ++i)
						s += " 01";

					var dat = new Date(s.replace(/-/g, ' '));
					return dat
				}

				sort(function(a, b) {
					var dateA = readCacheableProperty(a, 'releasedate', readDate);
					var dateB = readCacheableProperty(b, 'releasedate', readDate);

					return dateA - dateB;
				});
			}

			function sortByScrobbles() {
				function readScrobbles(x) {
					return $.trim($(x).find('p.times_listened').text());
				}

				sort(function(a, b) {
					return readCacheableProperty(b, 'times_listened', readScrobbles) -
                           readCacheableProperty(a, 'times_listened', readScrobbles); 
				});
			}

			function sortByLastFm() {
				function readListeners(x) {
					return $.trim($(x).find('p.listeners').text());
				}

				sort(function(a, b) {
					return readCacheableProperty(b, 'listeners', readListeners) -
                           readCacheableProperty(a, 'listeners', readListeners);
				});
			}
		#end raw
		</script>
	</head>

	<body>
		<h1>Albums</h1>

		<h2>Genres</h2>
		<ul id="genres">
			#for $genre in sorted($genres.keys())
				<li>
					<a href="$genres[$genre].clean_name#echo '.html'#\#start" class="tag$genres[$genre].weight" title="$genre: $genres[$genre].num_albums albums">$genre</a>
				</li>
			#end for
		</ul>

		<h2 id="start">$this_genre.name ($this_genre.num_albums albums)</h2>
		<p style="margin: 20px;">Sort by <a href="javascript:sortByName();">name</a>, <a href="javascript:sortByDate()">release date</a>, <a href="javascript:sortByLastFm()">popularity on last.fm</a>, <a href="javascript:sortByScrobbles()">your number of listens</a>.</p>

		<div id="albums">
		#for $artist in sorted($this_genre.artists.keys())
		#for $album in $this_genre.artists[artist].albums.values()
			<div class="album">
				<img src="../$album.cover_filename" width="128" height="128" />
                <p>$artist &#151; $album.name #if $album.date != ""#[$album.date]#end if#</p>
				<small>
					#set $sep = ''
					[#for $genre in $album.artist.genres#$sep<a href="$genre.clean_name#echo '.html'#\#start">$genre.name</a>#set $sep = ', '##end for#]
				</small>
				<p>
					<small>
						<em>$album.scrobbles scrobbles (#echo "%.2f" % $album.times_listened# times), $this_genre.artists[$artist].listeners listeners.</em> 
					</small>
				</p>

				<p class="releasedate">$album.date</p>
				<p class="scrobbles">$this_genre.artists[$artist].scrobbles</p>
				<p class="times_listened">$album.times_listened</p>
				<p class="listeners">$this_genre.artists[$artist].listeners</p>

				<hr />
			</div>
		#end for
        #end for
		</div>
	</body>
</html>
